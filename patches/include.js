// Generated by CoffeeScript 1.10.0
(function() {
  var Include, Liquid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Liquid = require("../../liquid");

  module.exports = Include = (function(superClass) {
    var Syntax, SyntaxFilenameVar, SyntaxHelp, SyntaxVars;

    extend(Include, superClass);

    Syntax = /([a-z0-9\/\\_-]+)/i;
		SyntaxFilenameVar = /\{\{\s*(.*)\s*\}\}/i;
		SyntaxVars = /([a-zA-Z\-_]+)="([^"]+)"/g;

    function Include(template, tagName, markup, tokens) {

			// get any tokens
			this.tokens = {};
			var vars = markup.match( SyntaxVars );
			if( vars )
			{
				// if we have something it'll be in the form 'key="var"'
				var len = vars.length;
				for( var i = 0; i < len; i++ )
				{
					var idx = vars[i].indexOf( '=' );
					var key = vars[i].substring( 0, idx );
					var val = vars[i].substring( idx + 2, vars[i].length - 1 ); // don't take the quote marks with the val
					this.tokens[key] = val;
				}
			}

			var matchVar = SyntaxFilenameVar.exec(markup); // check for vars
			if( matchVar )
			{
				this.template = template; // we'll need this for later to load the file
				this.filepathVar = new Liquid.Variable(matchVar[1]);
			}
			else
			{
				var match = Syntax.exec(markup);
				if (!match) {
					throw new Liquid.SyntaxError(SyntaxHelp);
				}
				this.filepath = match[1];
				this.subTemplate = template.engine.fileSystem.readTemplateFile(this.filepath).then(function(src) {
					return template.engine.parse(src);
				});
			}
      Include.__super__.constructor.apply(this, arguments);
    }

    Include.prototype.render = function(context) {

			// set any variables
			var len = context.environments.length;
			for( var i = 0; i < len; i++ )
			{
				if( context.environments[i].site != null )
					context.environments[i].include = this.tokens;
			}
		
			// if we have a filepathVar, then we need to render our var to get the
			// name of the content that we're loading
			if( this.filepathVar )
			{
				var incl = this;
				return this.filepathVar.render(context).then(function( path ){
					
					// remove any trailing filetype
					if( path.indexOf( "." ) != -1 )
						path = path.substring( 0, path.indexOf( "." ) );
						
					// load the file
					return incl.template.engine.fileSystem.readTemplateFile(path).then(function(src) {
						
						// get our template to parse the included file, then render
						return incl.template.engine.parse(src).then(function(i){
							return i.render( context );
						})
					});
				});
				
			}
			
			// from this point on, it's a normal include		
			return this.subTemplate.then(function(i) {
				return i.render(context);
			});
    };

    return Include;

  })(Liquid.Tag);

}).call(this);

//# sourceMappingURL=include.js.map
